public class LinkedListDeque{
  public Stuff sentinel;
  public int size;

  public static class Stuff{
    public int value;
    public prev, after;
    public Stuff(int x){
      value=x;
    }
    public void getR(int index){
      while 
    }
  }
  public LinkedListDeque(){
    Stuff sentinel = new Stuff(63);
    sentinel.prev=sentinel;
    sentinel.after=sentinel;
    size=0;
  }
  public void addFirst(int x){
    Stuff newguy= new Stuff(x);
    if (sentinel.after.equals(sentinel) && sentinel.prev.equals(sentinel)){
      sentinel.after=newguy;
      sentinel.prev=newguy;
      newguy.after=sentinel;
      newguy.prev=sentinel;
      size=size+1;
      return;
    }
    newguy.after=sentinel.after;
    newguy.prev=sentinel;
    newguy.after.prev=newguy;
    newguy.prev.after=newguy;
    size=size+1;
  }
  public class addLast(int x){
    Stuff newguy= new Stuff(x);
    if (sentinel.after.equals(sentinel) && sentinel.prev.equals(sentinel)){
      sentinel.after=newguy;
      sentinel.prev=newguy;
      newguy.after=sentinel;
      newguy.prev=sentinel;
      size=size+1;
      return;
    }
    newguy.after=sentinel;
    newguy.prev=sentinel.prev;
    newguy.after.prev=newguy;
    newguy.prev.after=newguy;
    size=size+1;
  }
  public boolean isEmpty(){
    return sentinel.after.equals(sentinel) && sentinel.prev.equals(sentinel);
  }
  public int size(){
    return size;
  }
  public void printDeque(){

  }
  public Item removeFirst(){
    if isempTY()
    return null;
    if (size==1){
      sentinel.after=sentinel;
      sentinel.prev=sentinel;
    }
  }
  public item get(int index){
    if (index<0 || index>=size){
      return null;
    }
    index=index+1;
    Stuff p=sentinel;
    while (index!=0){
      p=p.after;
      index=index-1;
    }
    return p.value;
  }
  public item getRecursive()
}
